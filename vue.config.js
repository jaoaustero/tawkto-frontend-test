/**
 * @file A configuration for `vue` these are new implementation based on new
 * version of `vue` and `vue-cli`.
 *
 * @author Jerald Austero
 * @copyright Jerald Austero 2020
 */

'use strict';

const dataObj = require('./src/data/data.json');

// 3rd party dependencies
const StyleLintPlugin = require('stylelint-webpack-plugin');
const CleanTerminalPlugin = require('clean-terminal-webpack-plugin');
const path = require('path');

module.exports = {

    /**
     * The base URL your application bundle will be deployed at (known as
     * baseUrl before Vue CLI 3.3).
     *
     * @type {String}
     * @default ['/']
     *
     * @see {@link https://cli.vuejs.org/config/#publicpath}
     */
    publicPath: '/',

    /**
     * the directory where production build files will be generated in when
     * running production build script
     *
     * @type {String}
     * @default ['dist']
     *
     * @see {@link https://cli.vuejs.org/config/#outputdir}
     */
    outputDir: 'dist/',

    /**
     * A directory relative to `outputDir` to nest generated static assets
     * (js, css, img, fonts) under.
     *
     * @type {String}
     * @default ['']
     *
     * @see {@link https://cli.vuejs.org/config/#assetsdir}
     */
    assetsDir: 'dist/static/',

    /**
     * Specify the output path for the generated `index.html` (relative to
     * `outputDir`). Can be also be an absolute path
     *
     * @type {String}
     * @default ['index.html']
     *
     * @see {@link https://cli.vuejs.org/config/#indexpath}
     */
    indexPath: 'index.html',

    /**
     * Generated static assets contains hashes in their filename for better
     * caching control. However, this requires the `index.html` to be
     * auto-generated by Vue-CLI.
     *
     * @type {Boolean}
     * @default [true]
     *
     * @see {@link https://cli.vuejs.org/config/#filenamehashing}
     */
    filenameHashing: false,

    /**
     * Build the app in multi-page mode. Each 'page' should have a
     * corresponding JavaScript entry file.
     *
     * @type {Object}
     * @default [undefined]
     *
     * @see {@link https://cli.vuejs.org/config/#pages}
     */
    pages: undefined,

    /**
     * Whether to use the build of Vue code that includes the runtime compiler.
     * Setting it to `true` will allow you to use `template` option in Vue
     * components, but will occur around extra 10kb payload for your app.
     *
     * @type {Boolean}
     * @default [false]
     *
     * @see {@link https://cli.vuejs.org/config/#runtimecompiler}
     */
    runtimeCompiler: false,

    /**
     * By default `babel-loader` ignores all files `node_modules`. If you want
     * to explicify transpile a dependency with Babel, you can list in this
     * option
     *
     * @type {Array}
     * @default [[]]
     *
     * Reference: https://cli.vuejs.org/config/#transpiledependencies
     */
    transpileDependencies: [],

    /**
     * Setting this to `false` can speed up production builds if you don't
     * need source maps for production
     *
     * @type {Boolean}
     * @default [true]
     *
     * @see {@link https://cli.vuejs.org/config/#productionsourcemap}
     */
    productionSourceMap: true,

    /**
     * Configure the `crossorigin` attribute on <link rel="stylesheet"> and
     * <script> tags in generated HTML.
     *
     * @type {String}
     * @default [undefined]
     *
     * @see {@link https://cli.vuejs.org/config/#crossorigin}
     */
    crossorigin: undefined,

    /**
     * Set to `true` to enable `Subresouce Integrity` <link rel="stylesheet">
     * and <script> tags in generated HTML. If you are hosting your built files
     * on a CDN. It is good to enable this for additional security. Note that
     * this only affects tags injected by html-webpack-plugin - tags directly
     * added in the source template (public/index.html) are not affected.
     *
     * @type {Boolean}
     * @default [false]
     *
     * @see {@link https://cli.vuejs.org/config/#integrity}
     */
    integrity: false,

    /**
     * If the value is an Object, it will merged into the final config using
     * `webpack-merge`. If the value is function, it will receive the resolved
     * config as the argument.
     *
     * @type {Object|Function}
     * @default [[]]
     *
     * @see {@link https://cli.vuejs.org/config/#configurewebpack}
     */
    configureWebpack:
    {
        plugins:
        [
            new CleanTerminalPlugin(),

            new StyleLintPlugin({
                files:
                    [
                        'src/**/*.{vue,scss}'
                    ],
            }),
        ],
    },

    /**
     * A function that will receive an instance of `ChainableConfig` powered by
     * `webpack-chain`. Allows for more fine-grained modification of the
     * internal webpack config.
     *
     * @type {Function}
     * @default [undefined]
     *
     * @see {@link https://cli.vuejs.org/config/#chainwebpack}
     */
    chainWebpack: undefined,

    css:
    {
        /**
         * By default, only file that ends `*.module.[ext]` are treated as CSS
         * modules. Setting to `false` will allow you to drop `.module` in the
         * filenames and treat all `.(css|scss|sass|less|styl(us)?)` files as
         * CSS modules.
         *
         * @type {Boolean}
         * @default [true]
         *
         * @see {@link https://cli.vuejs.org/config/#css-requiremoduleextension}
         */
        requireModuleExtension: true,

        /**
         * Extracting CSS is disabled by default in development mode since
         * it is incompatible with CSS hot reloading.
         *
         * @type {Boolean}
         * @default ['development' ? false : true]
         *
         * @see {@link https://cli.vuejs.org/config/#css-extract}
         */
        extract: process.env.BUILD_MODE === 'development'
            ? false
            : true,

        /**
         * Whether to enable source maps for CSS. Setting this to `true` may
         * affect build performance.
         *
         * @type {Boolean}
         * @default [false]
         *
         * @see {@link https://cli.vuejs.org/config/#css-sourcemap}
         */
        sourceMap: false,

        /**
         * Pass option to `CSS-related laoders`. Support loaders: css-loader,
         * postcss-loader, sass-loader, less-loader, stylus-loader
         *
         * @type {Object}
         * @default [{}]
         *
         * @see {@link https://cli.vuejs.org/config/#css-loaderoptions}
         */
        loaderOptions:
        {
            css:
            {
                // options here will be passed to css-loader
            },
            sass:
            {
                // options here will be passed on sass-loader
            },
        },
    },

    /**
     * All options for `webpack-dev-server` are supported.
     *
     * @type {Object}
     * @default [default values set by vue team]
     *
     * @see {@link https://cli.vuejs.org/config/#devserver}
     */
    devServer:
    {
        /**
         * Specify a host to use. If you want your server to be accessible
         * externally.
         *
         * @type {String}
         * @default [<project_name>]
         *
         * @see {@link https://webpack.js.org/configuration/dev-server/#devserverhost}
         */
        host: 'tawk.loc',

        /**
         * Specify a port number to listen for request
         *
         * @type {Number}
         * @default [8080]
         *
         * @see {@link https://webpack.js.org/configuration/dev-server/#devserverport}
         */
        port: 80,

        /**
         * By default dev-server will be served `http`. It can optionally be
         * served over `http/2` with `https` by providing self-signed
         * certificate
         *
         * @type {Object}
         * @default [false]
         *
         * @see {@link https://webpack.js.org/configuration/dev-server/#devserverhttps}
         */
        https: false,

        /**
         * Tells dev-server to open the browser after server had been started.
         * Set it `true` to open your default browser.
         *
         * @type {Boolean}
         * @default [false]
         *
         * @see {@link https://webpack.js.org/configuration/dev-server/#devserveropen}
         */
        open: true,

        /**
         * If your frontend and the backend API are not running on the same
         * host. You will need to proxy API requests to the API server during
         * development.
         *
         * @type {String|Object}
         * @default ['']
         *
         * @see {@link https://cli.vuejs.org/config/#devserver-proxy}
         */
        proxy: '',

        /**
         * Whether perform lint-on-save during development using eslint-loader.
         * The value is respected only when @vue/cli-plugin-eslint is installed
         *
         * @type {Boolean}
         * @default [true]
         *
         * @see {@link https://cli.vuejs.org/config/#lintonsave}
         */
        overlay:
        {
            /**
             * When warnings set to true will emit lint errors as warnings.
             * But this not fail the compilation and good for default
             * development.
             *
             * @type {Boolean}
             * @default [true]
             */
            warnings: true,

            /**
             * When errors set to true will force eslint-loader to emit
             * warnings as well warnings will also show up in the overlay.
             * Compilation will be failed.
             *
             * @type {Boolean}
             * @default [true]
             */
            errors: true,
        },

        /**
         *
         * @param {*} app
         * @param {*} server
         * @param {*} compiler
         */
        before: function(app, server, compiler) {
			app.get('/api/categories', function (req, res) {
				res.json({ data: dataObj.categories });
			});

			app.get('/api/category/*', function (req, res) {
				res.json({ data: dataObj.articles });
			});

			app.get('/api/author/*', function (req, res) {
				let author = {};
				const authorId = req.params['0'];

				for (let index = 0; index < dataObj.authors.length; index++) {
					if (dataObj.authors[index].id === authorId) {
						author = dataObj.authors[index];
						break;
					}

				}
				res.json({ data: author });
			});

			app.get('/api/search/*', function (req, res) {
				res.json({ data: dataObj.articles });
			});
		}
    },

    /**
     * Whether to use `thread-loader` for Babel or Typescript transpilation.
     * This is enabled for production builds when the system has more than 1
     * CPU cores. Passing a number will define the amount of workers used.
     *
     * @type {Boolean|Number}
     * @default [require('os').cpus().length > 1]
     *
     * @see {@link https://cli.vuejs.org/config/#parallel}
     */
    parallel: require('os').cpus().length > 1,

    /**
     * Pass options to the `PWA Plugin`
     *
     * @type {Object}
     * @default [{}]
     *
     * @see {@link https://cli.vuejs.org/config/#pwa}
     */
    pwa: {},

    /**
     * This is an object that doesn't go through any schema validation, so
     * it can be used to pass arbitary options to 3rd party plugins.
     *
     * @type {Object}
     * @default [{}]
     *
     * @see {@link https://cli.vuejs.org/config/#pluginoptions}
     */
    pluginOptions: {},

    /**
     * Enable the eslint linter
     *
     * @type {Boolean}
     * @default [false]
     *
     * @see {@link https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint}
     */
    lintOnSave: process.env.BUILD_MODE !== 'production',
}
